// Firestore Security Rules for Campus Rewards Dashboard
// This configuration allows public read access and restricts write access

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Allow public read access to all collections
    // This enables the user dashboard to display data without authentication
    match /{document=**} {
      allow read: if true;
    }
    
    // Rewards collection - Allow admin writes
    match /rewards/{rewardId} {
      allow write: if isAdmin();
    }
    
    // Students collection - Allow admin writes  
    match /students/{studentId} {
      allow write: if isAdmin();
    }
    
    // Houses collection - Allow admin writes
    match /houses/{houseId} {
      allow write: if isAdmin();
    }
    
    // Competitions collection - Allow admin writes
    match /competitions/{competitionId} {
      allow write: if isAdmin();
    }
    
    // Settings collection - Allow admin writes only
    match /settings/{settingId} {
      allow write: if isAdmin();
    }
    
    // Admin authentication helper function
    // Since you're not using Firebase Auth, this checks for a simple token
    // You can modify this based on your admin authentication needs
    function isAdmin() {
      // Option 1: Allow all writes (current test mode behavior)
      // Remove this line when you want to add security
      return true;
      
      // Option 2: Check for admin token in request
      // return request.auth != null && request.auth.token.admin == true;
      
      // Option 3: Check for specific admin email
      // return request.auth != null && request.auth.token.email == "admin@yourdomain.com";
    }
  }
}

/*
DEPLOYMENT INSTRUCTIONS:
1. Go to Firebase Console (https://console.firebase.google.com)
2. Select your project "efforts-celebrations"
3. Go to Firestore Database
4. Click on "Rules" tab
5. Replace the existing rules with the content above
6. Click "Publish"

SECURITY LEVELS (choose one by modifying the isAdmin() function):

LEVEL 1 - CURRENT (Test Mode):
- Anyone can read and write
- Good for development and testing
- Use: return true;

LEVEL 2 - PUBLIC READ, ADMIN WRITE:
- Anyone can read data (users can see rewards, leaderboards)
- Only admins can write data
- Use: return request.auth != null && request.auth.token.admin == true;

LEVEL 3 - RESTRICTED ACCESS:
- Only authenticated users can read
- Only admins can write
- Use: return request.auth != null; (for reads) and admin check for writes

For your current setup (no authentication), Level 1 is fine for development.
For production, consider implementing authentication or IP-based restrictions.
*/
